// <auto-generated />
using System;
using Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(InsectBreedingDbContext))]
    partial class InsectBreedingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Fodder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fodders");
                });

            modelBuilder.Entity("Domain.Entities.Insect", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LifeSpan")
                        .HasColumnType("int");

                    b.Property<float>("MaxHumidity")
                        .HasColumnType("real");

                    b.Property<float>("MaxTemperature")
                        .HasColumnType("real");

                    b.Property<float>("MinHumidity")
                        .HasColumnType("real");

                    b.Property<float>("MinLivingSpace")
                        .HasColumnType("real");

                    b.Property<float>("MinTemperature")
                        .HasColumnType("real");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Insects");
                });

            modelBuilder.Entity("Domain.Entities.InsectFodder", b =>
                {
                    b.Property<Guid>("InsectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FodderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("FodderConsumptionVolume")
                        .HasColumnType("real");

                    b.HasKey("InsectId", "FodderId");

                    b.HasIndex("FodderId");

                    b.ToTable("InsectFodders");
                });

            modelBuilder.Entity("Domain.Entities.InsectLivingPlase", b =>
                {
                    b.Property<Guid>("InsectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LivingPlaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("InsectCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("LivingPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SettlementDate")
                        .HasColumnType("datetime2");

                    b.HasKey("InsectId", "LivingPlaseId");

                    b.HasIndex("LivingPlaceId");

                    b.ToTable("InsectLivingPlases");
                });

            modelBuilder.Entity("Domain.Entities.LivingPlace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Humidity")
                        .HasColumnType("real");

                    b.Property<float>("LivingSpace")
                        .HasColumnType("real");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("Temperature")
                        .HasColumnType("real");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LivingPlaces");
                });

            modelBuilder.Entity("Domain.Entities.LivingPlaseFodder", b =>
                {
                    b.Property<Guid>("LivingPlaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FodderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float>("FodderVolume")
                        .HasColumnType("real");

                    b.Property<Guid?>("LivingPlaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LivingPlaseId", "FodderId");

                    b.HasIndex("FodderId");

                    b.HasIndex("LivingPlaceId");

                    b.ToTable("LivingPlaseFodders");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.Fodder", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Fodders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.Insect", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("Insects")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.InsectFodder", b =>
                {
                    b.HasOne("Domain.Entities.Fodder", null)
                        .WithMany("InsectFodders")
                        .HasForeignKey("FodderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Insect", null)
                        .WithMany("InsectFodders")
                        .HasForeignKey("InsectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.InsectLivingPlase", b =>
                {
                    b.HasOne("Domain.Entities.Insect", null)
                        .WithMany("InsectLivingPlases")
                        .HasForeignKey("InsectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LivingPlace", null)
                        .WithMany("InsectLivingPlases")
                        .HasForeignKey("LivingPlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.LivingPlace", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("LivingPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.LivingPlaseFodder", b =>
                {
                    b.HasOne("Domain.Entities.Fodder", null)
                        .WithMany("LivingPlaseFodders")
                        .HasForeignKey("FodderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entities.LivingPlace", null)
                        .WithMany("LivingPlaseFodders")
                        .HasForeignKey("LivingPlaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Fodder", b =>
                {
                    b.Navigation("InsectFodders");

                    b.Navigation("LivingPlaseFodders");
                });

            modelBuilder.Entity("Domain.Entities.Insect", b =>
                {
                    b.Navigation("InsectFodders");

                    b.Navigation("InsectLivingPlases");
                });

            modelBuilder.Entity("Domain.Entities.LivingPlace", b =>
                {
                    b.Navigation("InsectLivingPlases");

                    b.Navigation("LivingPlaseFodders");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("Fodders");

                    b.Navigation("Insects");

                    b.Navigation("LivingPlaces");
                });
#pragma warning restore 612, 618
        }
    }
}
